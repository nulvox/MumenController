//! GENERATED CODE - DO NOT EDIT MANUALLY
//!
//! This file was generated by build.rs from TOML configuration files.
//! Edit the source TOML files instead.

/// Pinout configuration constants and accessors
#[derive(Debug)]
pub struct PinoutConfig;

/// Digital input pin mapping constants
pub mod digital_pins {
    /// Pin number for the button_a button
    pub const BUTTON_A: u8 = 2;

    /// Pin number for the button_b button
    pub const BUTTON_B: u8 = 3;

    /// Pin number for the button_x button
    pub const BUTTON_X: u8 = 4;

    /// Pin number for the button_y button
    pub const BUTTON_Y: u8 = 5;

    /// Pin number for the button_l button
    pub const BUTTON_L: u8 = 6;

    /// Pin number for the button_r button
    pub const BUTTON_R: u8 = 7;

    /// Pin number for the button_zl button
    pub const BUTTON_ZL: u8 = 8;

    /// Pin number for the button_zr button
    pub const BUTTON_ZR: u8 = 9;

    /// Pin number for the button_plus button
    pub const BUTTON_PLUS: u8 = 10;

    /// Pin number for the button_minus button
    pub const BUTTON_MINUS: u8 = 11;

    /// Pin number for the button_home button
    pub const BUTTON_HOME: u8 = 12;

    /// Pin number for the button_capture button
    pub const BUTTON_CAPTURE: u8 = 14;

    /// Pin number for the button_l3 button
    pub const BUTTON_L3: u8 = 15;

    /// Pin number for the button_r3 button
    pub const BUTTON_R3: u8 = 16;

    /// Pin number for the dpad_up button
    pub const DPAD_UP: u8 = 17;

    /// Pin number for the dpad_down button
    pub const DPAD_DOWN: u8 = 18;

    /// Pin number for the dpad_left button
    pub const DPAD_LEFT: u8 = 19;

    /// Pin number for the dpad_right button
    pub const DPAD_RIGHT: u8 = 20;
}

/// Analog input pin mapping constants
pub mod analog_pins {
    /// Pin number for the left_stick_x axis
    pub const LEFT_STICK_X: u8 = 23;

    /// Pin number for the left_stick_y axis
    pub const LEFT_STICK_Y: u8 = 22;

    /// Pin number for the right_stick_x axis
    pub const RIGHT_STICK_X: u8 = 21;

    /// Pin number for the right_stick_y axis
    pub const RIGHT_STICK_Y: u8 = 20;
}

/// Special pins for additional functionality
pub mod special_pins {
    /// Pin number for lock functionality
    pub const LOCK_PIN: u8 = 33;
}

impl PinoutConfig {
    /// Get all digital pin mappings as (name, pin) pairs
    pub fn get_digital_pins() -> &'static [(&'static str, u8)] {
        &[
            ("button_a", 2),
            ("button_b", 3),
            ("button_x", 4),
            ("button_y", 5),
            ("button_l", 6),
            ("button_r", 7),
            ("button_zl", 8),
            ("button_zr", 9),
            ("button_plus", 10),
            ("button_minus", 11),
            ("button_home", 12),
            ("button_capture", 14),
            ("button_l3", 15),
            ("button_r3", 16),
            ("dpad_up", 17),
            ("dpad_down", 18),
            ("dpad_left", 19),
            ("dpad_right", 20),
        ]
    }

    /// Get all analog pin mappings as (name, pin) pairs
    pub fn get_analog_pins() -> &'static [(&'static str, u8)] {
        &[
            ("left_stick_x", 23),
            ("left_stick_y", 22),
            ("right_stick_x", 21),
            ("right_stick_y", 20),
        ]
    }

    /// Get all special pin mappings as (name, pin) pairs
    pub fn get_special_pins() -> &'static [(&'static str, u8)] {
        &[
            ("lock_pin", 33),
        ]
    }
}

/// SOCD handling configuration constants and accessors
#[derive(Debug)]
pub struct SocdConfig;

/// SOCD resolution method constants
pub mod socd_methods {
    /// Both inputs are neutralized
    pub const NEUTRAL: &str = "neutral";
    /// Last input wins
    pub const LAST_WIN: &str = "last-win";
    /// First input wins
    pub const FIRST_WIN: &str = "first-win";
    /// Up has priority over down
    pub const UP_PRIORITY: &str = "up-priority";
    /// Second input overrides the first
    pub const SECOND_PRIORITY: &str = "second-input-priority";
}

impl SocdConfig {
    /// Get SOCD resolution methods as (input_pair, method) pairs
    pub fn get_resolution_methods() -> &'static [(&'static str, &'static str)] {
        &[
            ("left_right", "neutral"),
            ("up_down", "up-priority"),
        ]
    }

    /// Get custom SOCD overrides as (input_combo, result) pairs
    pub fn get_custom_overrides() -> &'static [(&'static str, &'static str)] {
        &[
            // This would contain any custom overrides from the TOML file
        ]
    }

    /// Get the resolution method for a specific input pair
    pub fn get_method_for_pair(pair: &str) -> &'static str {
        match pair {
            "left_right" => "neutral",
            "up_down" => "up-priority",
            _ => "neutral", // Default to neutral if not specified
        }
    }
}